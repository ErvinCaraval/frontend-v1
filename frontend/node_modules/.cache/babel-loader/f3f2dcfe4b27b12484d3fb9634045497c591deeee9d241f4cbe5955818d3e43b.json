{"ast":null,"code":"// Mock authentication service for testing without Firebase\nclass MockAuth {\n  constructor() {\n    this.currentUser = null;\n    this.listeners = [];\n  }\n\n  // Mock sign in\n  async signInWithEmailAndPassword(email, password) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (email && password) {\n          this.currentUser = {\n            uid: 'mock-user-' + Date.now(),\n            email: email,\n            displayName: email.split('@')[0],\n            emailVerified: true\n          };\n          this.notifyListeners();\n          resolve({\n            user: this.currentUser\n          });\n        } else {\n          reject(new Error('Invalid email or password'));\n        }\n      }, 500);\n    });\n  }\n\n  // Mock sign up\n  async createUserWithEmailAndPassword(email, password) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (email && password) {\n          this.currentUser = {\n            uid: 'mock-user-' + Date.now(),\n            email: email,\n            displayName: email.split('@')[0],\n            emailVerified: true\n          };\n          this.notifyListeners();\n          resolve({\n            user: this.currentUser\n          });\n        } else {\n          reject(new Error('Invalid email or password'));\n        }\n      }, 500);\n    });\n  }\n\n  // Mock password reset\n  async sendPasswordResetEmail(email) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (email) {\n          resolve();\n        } else {\n          reject(new Error('Invalid email'));\n        }\n      }, 500);\n    });\n  }\n\n  // Mock sign out\n  async signOut() {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        this.currentUser = null;\n        this.notifyListeners();\n        resolve();\n      }, 200);\n    });\n  }\n\n  // Mock auth state listener\n  onAuthStateChanged(callback) {\n    this.listeners.push(callback);\n    // Call immediately with current user\n    callback(this.currentUser);\n\n    // Return unsubscribe function\n    return () => {\n      this.listeners = this.listeners.filter(listener => listener !== callback);\n    };\n  }\n  notifyListeners() {\n    this.listeners.forEach(listener => listener(this.currentUser));\n  }\n\n  // Mock update profile\n  async updateProfile(user, profile) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        if (this.currentUser && this.currentUser.uid === user.uid) {\n          this.currentUser.displayName = profile.displayName;\n          this.notifyListeners();\n        }\n        resolve();\n      }, 200);\n    });\n  }\n}\n\n// Create singleton instance\nconst mockAuth = new MockAuth();\nexport default mockAuth;","map":{"version":3,"names":["MockAuth","constructor","currentUser","listeners","signInWithEmailAndPassword","email","password","Promise","resolve","reject","setTimeout","uid","Date","now","displayName","split","emailVerified","notifyListeners","user","Error","createUserWithEmailAndPassword","sendPasswordResetEmail","signOut","onAuthStateChanged","callback","push","filter","listener","forEach","updateProfile","profile","mockAuth"],"sources":["/home/ervin-caravali-ibarra/Desktop/ok/multiplayer-quiz-game/client/src/services/mockAuth.js"],"sourcesContent":["// Mock authentication service for testing without Firebase\nclass MockAuth {\n  constructor() {\n    this.currentUser = null;\n    this.listeners = [];\n  }\n\n  // Mock sign in\n  async signInWithEmailAndPassword(email, password) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (email && password) {\n          this.currentUser = {\n            uid: 'mock-user-' + Date.now(),\n            email: email,\n            displayName: email.split('@')[0],\n            emailVerified: true\n          };\n          this.notifyListeners();\n          resolve({ user: this.currentUser });\n        } else {\n          reject(new Error('Invalid email or password'));\n        }\n      }, 500);\n    });\n  }\n\n  // Mock sign up\n  async createUserWithEmailAndPassword(email, password) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (email && password) {\n          this.currentUser = {\n            uid: 'mock-user-' + Date.now(),\n            email: email,\n            displayName: email.split('@')[0],\n            emailVerified: true\n          };\n          this.notifyListeners();\n          resolve({ user: this.currentUser });\n        } else {\n          reject(new Error('Invalid email or password'));\n        }\n      }, 500);\n    });\n  }\n\n  // Mock password reset\n  async sendPasswordResetEmail(email) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (email) {\n          resolve();\n        } else {\n          reject(new Error('Invalid email'));\n        }\n      }, 500);\n    });\n  }\n\n  // Mock sign out\n  async signOut() {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        this.currentUser = null;\n        this.notifyListeners();\n        resolve();\n      }, 200);\n    });\n  }\n\n  // Mock auth state listener\n  onAuthStateChanged(callback) {\n    this.listeners.push(callback);\n    // Call immediately with current user\n    callback(this.currentUser);\n    \n    // Return unsubscribe function\n    return () => {\n      this.listeners = this.listeners.filter(listener => listener !== callback);\n    };\n  }\n\n  notifyListeners() {\n    this.listeners.forEach(listener => listener(this.currentUser));\n  }\n\n  // Mock update profile\n  async updateProfile(user, profile) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        if (this.currentUser && this.currentUser.uid === user.uid) {\n          this.currentUser.displayName = profile.displayName;\n          this.notifyListeners();\n        }\n        resolve();\n      }, 200);\n    });\n  }\n}\n\n// Create singleton instance\nconst mockAuth = new MockAuth();\n\nexport default mockAuth;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}